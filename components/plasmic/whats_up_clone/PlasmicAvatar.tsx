// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6DJkPmHY5SLmKWFpAEwtam
// Component: T7ydlGAjdN
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_whats_up_clone.module.css"; // plasmic-import: 6DJkPmHY5SLmKWFpAEwtam/projectcss
import sty from "./PlasmicAvatar.module.css"; // plasmic-import: T7ydlGAjdN/css

export type PlasmicAvatar__VariantMembers = {
  isEmpty: "isEmpty";
  size: "_60" | "_40" | "_30";
};

export type PlasmicAvatar__VariantsArgs = {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
  size?: SingleChoiceArg<"_60" | "_40" | "_30">;
};

type VariantPropType = keyof PlasmicAvatar__VariantsArgs;
export const PlasmicAvatar__VariantProps = new Array<VariantPropType>(
  "isEmpty",
  "size"
);

export type PlasmicAvatar__ArgsType = {
  imageUrl?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  prefixText?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAvatar__ArgsType;
export const PlasmicAvatar__ArgProps = new Array<ArgPropType>(
  "imageUrl",
  "prefixText"
);

export type PlasmicAvatar__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultAvatarProps {
  imageUrl?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  prefixText?: React.ReactNode;
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
  size?: SingleChoiceArg<"_60" | "_40" | "_30">;
  className?: string;
}

function PlasmicAvatar__RenderFunc(props: {
  variants: PlasmicAvatar__VariantsArgs;
  args: PlasmicAvatar__ArgsType;
  overrides: PlasmicAvatar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    (hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootisEmpty]: hasVariant(variants, "isEmpty", "isEmpty"),
            [sty.rootisEmpty_size__30]:
              hasVariant(variants, "isEmpty", "isEmpty") &&
              hasVariant(variants, "size", "_30"),
            [sty.rootisEmpty_size__40]:
              hasVariant(variants, "isEmpty", "isEmpty") &&
              hasVariant(variants, "size", "_40"),
            [sty.rootisEmpty_size__60]:
              hasVariant(variants, "isEmpty", "isEmpty") &&
              hasVariant(variants, "size", "_60")
          }
        )}
      >
        {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgisEmpty]: hasVariant(variants, "isEmpty", "isEmpty"),
              [sty.imgisEmpty_size__40]:
                hasVariant(variants, "isEmpty", "isEmpty") &&
                hasVariant(variants, "size", "_40"),
              [sty.imgsize__30]: hasVariant(variants, "size", "_30"),
              [sty.imgsize__40]: hasVariant(variants, "size", "_40"),
              [sty.imgsize__60]: hasVariant(variants, "size", "_60")
            })}
            displayHeight={
              hasVariant(variants, "size", "_30")
                ? ("30px" as const)
                : hasVariant(variants, "size", "_40")
                ? ("40px" as const)
                : hasVariant(variants, "size", "_60")
                ? ("60px" as const)
                : ("80px" as const)
            }
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={
              hasVariant(variants, "size", "_30")
                ? ("30px" as const)
                : hasVariant(variants, "size", "_40")
                ? ("40px" as const)
                : hasVariant(variants, "size", "_60")
                ? ("60px" as const)
                : ("80px" as const)
            }
            displayMinWidth={
              hasVariant(variants, "size", "_30")
                ? ("30px" as const)
                : hasVariant(variants, "size", "_40")
                ? ("40px" as const)
                : hasVariant(variants, "size", "_60")
                ? ("60px" as const)
                : ("80px" as const)
            }
            displayWidth={
              hasVariant(variants, "size", "_30")
                ? ("30px" as const)
                : hasVariant(variants, "size", "_40")
                ? ("40px" as const)
                : hasVariant(variants, "size", "_60")
                ? ("60px" as const)
                : ("80px" as const)
            }
            loading={"lazy" as const}
            src={args.imageUrl}
          />
        ) : null}
        {(hasVariant(variants, "isEmpty", "isEmpty") ? true : true) ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxisEmpty]: hasVariant(variants, "isEmpty", "isEmpty"),
              [sty.freeBoxisEmpty_size__30]:
                hasVariant(variants, "isEmpty", "isEmpty") &&
                hasVariant(variants, "size", "_30")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "A",
              value: args.prefixText,
              className: classNames(sty.slotTargetPrefixText, {
                [sty.slotTargetPrefixTextisEmpty]: hasVariant(
                  variants,
                  "isEmpty",
                  "isEmpty"
                ),
                [sty.slotTargetPrefixTextisEmpty_size__30]:
                  hasVariant(variants, "isEmpty", "isEmpty") &&
                  hasVariant(variants, "size", "_30"),
                [sty.slotTargetPrefixTextisEmpty_size__40]:
                  hasVariant(variants, "isEmpty", "isEmpty") &&
                  hasVariant(variants, "size", "_40"),
                [sty.slotTargetPrefixTextisEmpty_size__60]:
                  hasVariant(variants, "isEmpty", "isEmpty") &&
                  hasVariant(variants, "size", "_60")
              })
            })}
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "freeBox"],
  img: ["img"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAvatar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAvatar__VariantsArgs;
    args?: PlasmicAvatar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAvatar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAvatar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAvatar__ArgProps,
          internalVariantPropNames: PlasmicAvatar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAvatar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAvatar";
  } else {
    func.displayName = `PlasmicAvatar.${nodeName}`;
  }
  return func;
}

export const PlasmicAvatar = Object.assign(
  // Top-level PlasmicAvatar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicAvatar
    internalVariantProps: PlasmicAvatar__VariantProps,
    internalArgProps: PlasmicAvatar__ArgProps
  }
);

export default PlasmicAvatar;
/* prettier-ignore-end */
