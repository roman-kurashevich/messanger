// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6DJkPmHY5SLmKWFpAEwtam
// Component: 61OiGHIuWZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ChatListItem from "../../ChatListItem"; // plasmic-import: Y-3HcglXLQ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_whats_up_clone.module.css"; // plasmic-import: 6DJkPmHY5SLmKWFpAEwtam/projectcss
import sty from "./PlasmicChatList.module.css"; // plasmic-import: 61OiGHIuWZ/css

import Loader22Icon from "./icons/PlasmicIcon__Loader22"; // plasmic-import: IETgYjRwR/icon

export type PlasmicChatList__VariantMembers = {
  isLoading: "isLoading";
};

export type PlasmicChatList__VariantsArgs = {
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
};

type VariantPropType = keyof PlasmicChatList__VariantsArgs;
export const PlasmicChatList__VariantProps = new Array<VariantPropType>(
  "isLoading"
);

export type PlasmicChatList__ArgsType = {};
type ArgPropType = keyof PlasmicChatList__ArgsType;
export const PlasmicChatList__ArgProps = new Array<ArgPropType>();

export type PlasmicChatList__OverridesType = {
  root?: p.Flex<"div">;
  chatListWrapper?: p.Flex<"div">;
  chatListItem?: p.Flex<typeof ChatListItem>;
  svg?: p.Flex<"svg">;
};

export interface DefaultChatListProps {
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  className?: string;
}

function PlasmicChatList__RenderFunc(props: {
  variants: PlasmicChatList__VariantsArgs;
  args: PlasmicChatList__ArgsType;
  overrides: PlasmicChatList__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"chatListWrapper"}
          data-plasmic-override={overrides.chatListWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.chatListWrapper, {
            [sty.chatListWrapperisLoading]: hasVariant(
              variants,
              "isLoading",
              "isLoading"
            )
          })}
        >
          {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
            <ChatListItem
              data-plasmic-name={"chatListItem"}
              data-plasmic-override={overrides.chatListItem}
              className={classNames("__wab_instance", sty.chatListItem, {
                [sty.chatListItemisLoading]: hasVariant(
                  variants,
                  "isLoading",
                  "isLoading"
                )
              })}
            />
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
        <Loader22Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgisLoading]: hasVariant(variants, "isLoading", "isLoading")
          })}
          role={"img"}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "chatListWrapper", "chatListItem", "svg"],
  chatListWrapper: ["chatListWrapper", "chatListItem"],
  chatListItem: ["chatListItem"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  chatListWrapper: "div";
  chatListItem: typeof ChatListItem;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChatList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChatList__VariantsArgs;
    args?: PlasmicChatList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChatList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChatList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicChatList__ArgProps,
          internalVariantPropNames: PlasmicChatList__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicChatList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatList";
  } else {
    func.displayName = `PlasmicChatList.${nodeName}`;
  }
  return func;
}

export const PlasmicChatList = Object.assign(
  // Top-level PlasmicChatList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    chatListWrapper: makeNodeComponent("chatListWrapper"),
    chatListItem: makeNodeComponent("chatListItem"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicChatList
    internalVariantProps: PlasmicChatList__VariantProps,
    internalArgProps: PlasmicChatList__ArgProps
  }
);

export default PlasmicChatList;
/* prettier-ignore-end */
