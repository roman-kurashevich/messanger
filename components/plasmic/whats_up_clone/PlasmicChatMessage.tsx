// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6DJkPmHY5SLmKWFpAEwtam
// Component: PlKHEsKkAn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: T7ydlGAjdN/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_whats_up_clone.module.css"; // plasmic-import: 6DJkPmHY5SLmKWFpAEwtam/projectcss
import sty from "./PlasmicChatMessage.module.css"; // plasmic-import: PlKHEsKkAn/css

export type PlasmicChatMessage__VariantMembers = {
  isSent: "isSent";
};

export type PlasmicChatMessage__VariantsArgs = {
  isSent?: SingleBooleanChoiceArg<"isSent">;
};

type VariantPropType = keyof PlasmicChatMessage__VariantsArgs;
export const PlasmicChatMessage__VariantProps = new Array<VariantPropType>(
  "isSent"
);

export type PlasmicChatMessage__ArgsType = {
  content?: React.ReactNode;
  createdAt?: React.ReactNode;
  username?: React.ReactNode;
};

type ArgPropType = keyof PlasmicChatMessage__ArgsType;
export const PlasmicChatMessage__ArgProps = new Array<ArgPropType>(
  "content",
  "createdAt",
  "username"
);

export type PlasmicChatMessage__OverridesType = {
  root?: p.Flex<"div">;
  avatar?: p.Flex<typeof Avatar>;
  chatWrapper?: p.Flex<"div">;
};

export interface DefaultChatMessageProps {
  content?: React.ReactNode;
  createdAt?: React.ReactNode;
  username?: React.ReactNode;
  isSent?: SingleBooleanChoiceArg<"isSent">;
  className?: string;
}

function PlasmicChatMessage__RenderFunc(props: {
  variants: PlasmicChatMessage__VariantsArgs;
  args: PlasmicChatMessage__ArgsType;
  overrides: PlasmicChatMessage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisSent]: hasVariant(variants, "isSent", "isSent") }
      )}
    >
      <Avatar
        data-plasmic-name={"avatar"}
        data-plasmic-override={overrides.avatar}
        className={classNames("__wab_instance", sty.avatar)}
        size={"_40" as const}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"chatWrapper"}
        data-plasmic-override={overrides.chatWrapper}
        hasGap={true}
        className={classNames(projectcss.all, sty.chatWrapper, {
          [sty.chatWrapperisSent]: hasVariant(variants, "isSent", "isSent")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wtk9P)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset ",
            value: args.content
          })}
        </div>

        <div
          className={classNames(projectcss.all, sty.freeBox___7YoHf, {
            [sty.freeBoxisSent___7YoHferpDu]: hasVariant(
              variants,
              "isSent",
              "isSent"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "8 minutes ago",
            value: args.createdAt,
            className: classNames(sty.slotTargetCreatedAt)
          })}
        </div>
      </p.Stack>

      <div
        className={classNames(projectcss.all, sty.freeBox__eEsS, {
          [sty.freeBoxisSent__eEsSerpDu]: hasVariant(
            variants,
            "isSent",
            "isSent"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.username,
          className: classNames(sty.slotTargetUsername)
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "avatar", "chatWrapper"],
  avatar: ["avatar"],
  chatWrapper: ["chatWrapper"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
  chatWrapper: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChatMessage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChatMessage__VariantsArgs;
    args?: PlasmicChatMessage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChatMessage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChatMessage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicChatMessage__ArgProps,
          internalVariantPropNames: PlasmicChatMessage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicChatMessage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatMessage";
  } else {
    func.displayName = `PlasmicChatMessage.${nodeName}`;
  }
  return func;
}

export const PlasmicChatMessage = Object.assign(
  // Top-level PlasmicChatMessage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    chatWrapper: makeNodeComponent("chatWrapper"),

    // Metadata about props expected for PlasmicChatMessage
    internalVariantProps: PlasmicChatMessage__VariantProps,
    internalArgProps: PlasmicChatMessage__ArgProps
  }
);

export default PlasmicChatMessage;
/* prettier-ignore-end */
