// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6DJkPmHY5SLmKWFpAEwtam
// Component: On4mLNNx3a
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: T7ydlGAjdN/component
import TextInput from "../../TextInput"; // plasmic-import: I_rUXdtei71/component
import ChatList from "../../ChatList"; // plasmic-import: 61OiGHIuWZ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_whats_up_clone.module.css"; // plasmic-import: 6DJkPmHY5SLmKWFpAEwtam/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: On4mLNNx3a/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: WmT0SVOtYXf/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: B02IfxOijYJ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: F6EIEztEldC/icon

export type PlasmicSidebar__VariantMembers = {};

export type PlasmicSidebar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>();

export type PlasmicSidebar__ArgsType = {
  username?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>("username");

export type PlasmicSidebar__OverridesType = {
  root?: p.Flex<"div">;
  headerProfile?: p.Flex<"div">;
  userAvatar?: p.Flex<typeof Avatar>;
  logoutIcon?: p.Flex<"svg">;
  searchInputWrapper?: p.Flex<"div">;
  searchRoomTextInput?: p.Flex<typeof TextInput>;
  addNewRoomWrapper?: p.Flex<"div">;
  text?: p.Flex<"div">;
  chatList?: p.Flex<typeof ChatList>;
};

export interface DefaultSidebarProps {
  username?: React.ReactNode;
  className?: string;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"headerProfile"}
        data-plasmic-override={overrides.headerProfile}
        hasGap={true}
        className={classNames(projectcss.all, sty.headerProfile)}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__oXsY)}
          >
            <Avatar
              data-plasmic-name={"userAvatar"}
              data-plasmic-override={overrides.userAvatar}
              className={classNames("__wab_instance", sty.userAvatar)}
              isEmpty={true}
              size={"_60" as const}
            />

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__rNKtW)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Enter some text",
                  value: args.username
                })}
              </div>
            ) : null}
          </p.Stack>
        ) : null}

        <IconIcon
          data-plasmic-name={"logoutIcon"}
          data-plasmic-override={overrides.logoutIcon}
          className={classNames(projectcss.all, sty.logoutIcon)}
          role={"img"}
        />
      </p.Stack>

      <div
        data-plasmic-name={"searchInputWrapper"}
        data-plasmic-override={overrides.searchInputWrapper}
        className={classNames(projectcss.all, sty.searchInputWrapper)}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__pFiZh)}>
            {true ? (
              <TextInput
                data-plasmic-name={"searchRoomTextInput"}
                data-plasmic-override={overrides.searchRoomTextInput}
                className={classNames(
                  "__wab_instance",
                  sty.searchRoomTextInput
                )}
                placeholder={"Search room by name..." as const}
              />
            ) : null}
          </div>
        ) : null}
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox___5Jqex)}>
          <div
            data-plasmic-name={"addNewRoomWrapper"}
            data-plasmic-override={overrides.addNewRoomWrapper}
            className={classNames(projectcss.all, sty.addNewRoomWrapper)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Add new room"}
            </div>
          </div>
        </div>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__cweDs)}>
          <ChatList
            data-plasmic-name={"chatList"}
            data-plasmic-override={overrides.chatList}
            className={classNames("__wab_instance", sty.chatList)}
          />
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerProfile",
    "userAvatar",
    "logoutIcon",
    "searchInputWrapper",
    "searchRoomTextInput",
    "addNewRoomWrapper",
    "text",
    "chatList"
  ],
  headerProfile: ["headerProfile", "userAvatar", "logoutIcon"],
  userAvatar: ["userAvatar"],
  logoutIcon: ["logoutIcon"],
  searchInputWrapper: ["searchInputWrapper", "searchRoomTextInput"],
  searchRoomTextInput: ["searchRoomTextInput"],
  addNewRoomWrapper: ["addNewRoomWrapper", "text"],
  text: ["text"],
  chatList: ["chatList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerProfile: "div";
  userAvatar: typeof Avatar;
  logoutIcon: "svg";
  searchInputWrapper: "div";
  searchRoomTextInput: typeof TextInput;
  addNewRoomWrapper: "div";
  text: "div";
  chatList: typeof ChatList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSidebar__ArgProps,
          internalVariantPropNames: PlasmicSidebar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerProfile: makeNodeComponent("headerProfile"),
    userAvatar: makeNodeComponent("userAvatar"),
    logoutIcon: makeNodeComponent("logoutIcon"),
    searchInputWrapper: makeNodeComponent("searchInputWrapper"),
    searchRoomTextInput: makeNodeComponent("searchRoomTextInput"),
    addNewRoomWrapper: makeNodeComponent("addNewRoomWrapper"),
    text: makeNodeComponent("text"),
    chatList: makeNodeComponent("chatList"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
